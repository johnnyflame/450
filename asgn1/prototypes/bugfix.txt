1d0
< import imp
8,11d6
< import mathutils
< 
< import Render 
< imp.reload(Render)
12a8,11
> #global data from the user
> width = 1
> length = 1
> height = 1 
15a15
> dimensions = (width,length,height)
22,46d21
< def create(xSize, ySize, height, name):
<     """Create a building with the given dimensions and name"""
<     
<     # Create an empty object to act as a reference and an object
<     bpy.ops.object.empty_add(location=(0,0,0))
<     bpy.context.selected_objects[0].name = name
<     axes = bpy.data.objects[name]
<     
<     # Create a cube and resize it appropriately
<     bpy.ops.mesh.primitive_cube_add(location=(xSize*0.5, ySize*0.5, height*0.5))
<     bpy.context.selected_objects[0].name = name + ".block"
<     bpy.ops.transform.resize(value=(xSize*0.5, ySize*0.5, height*0.5))
<     
<     # Assign a random concrete material to the block
<     block = bpy.data.objects[name+".block"]
<     block.data.materials.append(random.choice(Init.materials))
<     
<     # Make the block a child of the reference axes
<     block.parent=axes
<     
<     # And the axes are returned so that the building can be moved
<     return axes
< 
< 
< 
50,51c25
< def make_ground(xSize,ySize,height):
<     dimensions = (xSize,ySize,height)
---
> def make_ground():
52a27
>     ground(location = (0,0,0))
54,56c29
<     ground(location = (xSize*0.5,ySize*0.5,0))
<     
<     groundsize = [x * 0.5 for x in dimensions]
---
>     groundsize = [x * 30 for x in dimensions]
75,79c48
<     bpy.context.object.data.materials.append(groundMaterial)
<     bpy.context.object.active_material.texture_slots[0].scale[0] = 5
<     bpy.context.object.active_material.texture_slots[0].scale[1] = 5
<     bpy.context.object.active_material.texture_slots[0].scale[2] = 5
< 
---
>     bpy.context.object.data.materials.append(groundMaterial);
88d56
<    
98,99d65
<     - Dome
<     - Stairs
114,120c80
<     #####################################################################################################################
<     # Boolean flags with default values, chages with input dimensions.
<     has_dome = False
<     use_library = False
<     is_fluted = False
<     
<     
---
>     use_library = True
122,130d81
<      
<     columns_per_shortedge = 2 #random.choice([2,4,6,8]) 
<     columns_per_longedge =  2 #random.randint(4,8)
<     #####################################################################################################################
<     
<     box_width = 26
<     box_length = 26
<     
<     box_height = 17
134,187c85,86
<     make_ground(box_width,box_length,box_height)
<    
<     if box_width < 3:
<         use_library = False
<                 
<     podium_x = box_width * 0.5
<     podium_y = box_length * 0.5
<     
<     MAX_PODIUM_WIDTH = box_width * 0.5
<     MAX_PODIUM_LENGTH = box_length * 0.5
<     
<     MAX_BUILDING_HEIGHT = box_height * 0.5
<     
<  #   MAX_BUILDING_HEIGHT = height * 0.5 
<     
<     
<     
<     
<     podium_width = MAX_PODIUM_WIDTH * 0.5#random.uniform(0.35,0.6)
<     podium_length = MAX_PODIUM_LENGTH #parametise this, work out valid range
<     
<     podium_height = MAX_BUILDING_HEIGHT / 5.88 #parametise this, work out a range.
<     
<     available_height = MAX_BUILDING_HEIGHT - podium_height 
<     
<     
<     # If the building has a dome, a new list of parameters are needed to make it look sensible.
<     if has_dome:
<             
<         podium_width = MAX_PODIUM_WIDTH * 0.5
<         podium_length = podium_width * 1.80#parametise this, work out valid range
<         podium_height = podium_width / 4.75 #parametise this.
<         
<         podium_x = box_width * 0.5
<         podium_y = box_length * 0.5 + podium_length/2
<         
<         # Dome Parameters
<         # height: randomize 
<         dome_body_height = box_height * 0.5
< 
<         dome_body_radius = MAX_PODIUM_WIDTH
<         
<         dome_locX = podium_x 
<         dome_locY = podium_y - podium_length 
<         dome_locZ = dome_body_height 
<    
<             
<         
<         
<     
<     
<    
<     
<     column_base_size = min((podium_width/8),min(podium_width/(columns_per_shortedge * 2),podium_length/(columns_per_longedge * 2))) # determins the size of the pillars
---
>     podium_x = 1
>     podium_y = 1
188a88,93
>     podium_width = 3.0
>     podium_length = podium_width * 1.95
>     podium_height = podium_width / 4.75
> 
>     columns_per_shortedge = 6
>     columns_per_longedge = 8
189a95
>     column_base_size = podium_width/12.0 # determins the size of the pillars
193,197c99
<     
<     #paramized according to building height
<     
<     #Changing the ratio drastically here is NOT recommented, 
<     column_pillar_height = podium_width * 0.666  
---
>     column_pillar_height = 2   
204,211d105
<     
<     
<     
<     
<     
<     
<     
<     
220,236c114
<     roof_height = podium_height * 1.0
<     
<     
< 
<     
<     
<     
<     stair_locX = podium_x
<     stair_locY = podium_y + podium_length
<     stair_locZ = podium_height
<     
<     stair_length = podium_length * 0.25 - column_base_size
<     stair_width = podium_width * 0.31 
<     stair_height = podium_height 
<     
<     
< 
---
>     roof_height = podium_height 
246c124,125
<             
---
>        
>      
251c130,134
<                 
---
>     
>   
> 
> 
>     
256a140
> 
268c152
<    # Make roof by folding in vertices
---
>    #Make roof
292c176,183
<     bpy.ops.mesh.merge(type='CENTER')   
---
>     bpy.ops.mesh.merge(type='CENTER')
>    
>    
>    
>    
>    
>    
>    
295,297d185
<     
<     # Placing the column base tiles and the columns.
<     
348,349c236,238
<         # This ensures no overlap of objects.
<         if s != 0 and s != columns_per_shortedge-1:
---
>         bpy.ops.mesh.primitive_cube_add(location = (podium_x + x_offset, podium_y + y_offset, base_z_location))
>         bpy.ops.transform.resize(value = (column_base_size,column_base_size,column_base_height))
>         
351,363c240,243
<             bpy.ops.mesh.primitive_cube_add(location = (podium_x + x_offset, podium_y + y_offset, base_z_location))
<             bpy.ops.transform.resize(value = (column_base_size,column_base_size,column_base_height))
<                     
<             bpy.ops.mesh.primitive_cube_add(location = (podium_x + x_offset, podium_y - (podium_length - column_base_size -column_base_edge), 2 * podium_height + column_base_height))               
<             bpy.ops.transform.resize(value = (column_base_size,column_base_size,column_base_height))
<         
<             if use_library:
<                        
<                 stylized_pillars(podium_x + x_offset, podium_y + y_offset
<                     , base_z_location + column_base_height,height=(column_pillar_height*2)-top_height,b_width=column_base_size)
<                     
<                 stylized_pillars(podium_x + x_offset, podium_y - (podium_length - column_base_size -column_base_edge), base_z_location + column_base_height,height=(column_pillar_height*2)-top_height,b_width=column_base_size)
<           
---
>         bpy.ops.mesh.primitive_cube_add(location = (podium_x + x_offset, podium_y - (podium_length - column_base_size -column_base_edge), 2 * podium_height + column_base_height))               
>         bpy.ops.transform.resize(value = (column_base_size,column_base_size,column_base_height))
>     
>         if use_library:
365c245,255
<             else:    
---
>             stylized_pillars(podium_x + x_offset, podium_y + y_offset
>                 , base_z_location + column_base_height,height=(column_pillar_height*2)-top_height,b_width=column_base_size)
>                 
>             stylized_pillars(podium_x + x_offset, podium_y - (podium_length - column_base_size -column_base_edge), base_z_location + column_base_height,height=(column_pillar_height*2)-top_height,b_width=column_base_size)
>     
>     
>     
>     
>     
>     
>         else:        
379,382c269
< 
<     if has_dome:                                    make_dome(dome_locX,dome_locY,dome_locZ,height=dome_body_height,radius=dome_body_radius)    
< 
<     make_stairs(stair_locX,stair_locY,stair_locZ,stair_height,stair_width,stair_length,length_offset=column_base_size)
---
>     
385d271
< #Using an addon to generate beautiful, stylized columns, lots of parameters to randomize here.
391,392c277
<     bpy.ops.mesh.add_column(Style="0",col_base=True,addendum=0.04,col_plinth=False,base_type=7,col_taper=0.01,col_flutes=8,base_width=b_width,col_radius=b_width,cap_width=b_width,row_height=height*0.2,col_blocks=5)
<     
---
>     bpy.ops.mesh.add_column(Style="0",col_base=True,addendum=0.04,col_plinth=False,base_type=7,col_taper=0.03,col_flutes=8,base_width=b_width,col_radius=b_width,cap_width=b_width,row_height=height*0.2,col_blocks=5)
397,461d281
< 
<         
< 
< 
< # The 'dome' part of the building, as seen in Pantheon. Basically a ball and a cylinder with decorations
< def make_dome(locX,locY,locZ,height,radius):
<     
<     dome_radius = radius * 0.95
<     dome_height = height * 0.9
<     dome_locZ = locZ + 0.80 * dome_height
<     
<     
<     dome_body = bpy.ops.mesh.primitive_cylinder_add
<     dome_body(location = (locX,locY,locZ))
<     bpy.ops.transform.resize(value=(radius,radius,height))
<     
<     
<     dome = bpy.ops.mesh.primitive_uv_sphere_add
<     dome(location = (locX,locY,dome_locZ))
<     bpy.ops.transform.resize(value=(dome_radius,dome_radius,dome_height))
<     
<     
<     
< def make_stairs(locX,locY,locZ,height,width,length,length_offset):
<         
<     cutaway = bpy.ops.mesh.primitive_cube_add    
<     cutaway(location = (locX,locY,locZ))
<     bpy.ops.transform.resize(value = (width,(length * 2) - length_offset,height*2))
<     bpy.context.selected_objects[0].name = "Cutaway"
<         
<     object = bpy.data.objects['Cutaway']
<     object.select = False
<     
<     current_object = bpy.data.objects['Podium']
<     current_object.select = True
<     
<     bpy.context.scene.objects.active = current_object
<     
<     bpy.ops.object.modifier_add(type='BOOLEAN')
<     
<     
<     bpy.context.object.modifiers["Boolean"].operation = 'DIFFERENCE'
<     bpy.context.object.modifiers["Boolean"].object = bpy.data.objects["Cutaway"]    
<     bpy.ops.object.modifier_apply(apply_as='DATA', modifier="Boolean")
<     current_object = bpy.data.objects['Podium']
<     current_object.select = False 
<     
<     current_object = bpy.data.objects['Cutaway']
<     current_object.select = True
<     bpy.ops.object.delete(use_global=False)
<     
<     
<     
<     steps_no = random.randint(3,8)
<     step_height = height * 2
<     
<     
< 
<     bpy.ops.mesh.archimesh_stairs(step_num = steps_no,height = step_height/(steps_no + 1),
<     depth=(length-length_offset)/steps_no,back=False,thickness=0,front_gap=0)
<     bpy.context.object.location = (locX,locY ,locZ - height)
<     
<     bpy.context.object.rotation_euler[2] = 3.14159
< 
<     bpy.ops.transform.resize(value = (width*2,length*2,1))
463,468d282
<     
< 
< 
< 
<         
<         
501a316,317
> bpy.ops.object.mode_set(mode = 'OBJECT')
> 
508a325,327
> #adding camera here:
> bpy.ops.object.camera_add(view_align=True, enter_editmode=False, location=(13.019, 34.385, 32.3064), rotation=(1.28381, -1.48851e-06, -1.77894), layers=(True, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False))
> 
511c330
< sun = bpy.ops.object.lamp_add(type='SUN', location = (-20, 2, 20))
---
> sun = bpy.ops.object.lamp_add(type='SUN', location = (-5, 5, 5))
515,518d333
< bpy.context.object.data.shadow_method = 'RAY_SHADOW'
< bpy.context.object.data.energy = 0.70
< 
< 
525,528c340
< 
< 
< 
< 
---
> make_ground()
530,533d341
< 
< 
< 
< #Render.render((15, 10, 8), (0, 0, 3), '//render.png')
\ No newline at end of file
